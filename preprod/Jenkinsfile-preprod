pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'ousshen'
        DOCKER_REPO = 'cogeex'
        DOCKER_CRED_ID = 'docker_creds'
        SSH_CRED_ID = 'ssh-credentials'
        AZURE_GIT_CRED_ID = 'azure_secret'
        GIT_CRED_ID = 'git_secret'
        JENKINS_DEVOPS_REPO = 'https://github.com/co-consult/jenkins-devops'
        JENKINS_DEVOPS_BRANCH = 'DEVOPS-13'
        VPS_USER = 'ubuntu'
        VPS_HOST = '20.19.38.22'
    }

    stages {
        stage('Push Microservice Images') {
            parallel {
                stage('Push Eureka') {
                    steps {
                        script {
                            docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_CRED_ID}") {
                                sh "docker tag cogeex-eureka:latest ${DOCKER_REGISTRY}/${DOCKER_REPO}:eureka-latest-${BUILD_NUMBER}"
                                sh "docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}:eureka-latest-${BUILD_NUMBER}"
                            }
                        }
                    }
                }
                stage('Push Gateway') {
                    steps {
                        script {
                            docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_CRED_ID}") {
                                sh "docker tag cogeex-gateway:latest ${DOCKER_REGISTRY}/${DOCKER_REPO}:gateway-latest-${BUILD_NUMBER}"
                                sh "docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}:gateway-latest-${BUILD_NUMBER}"
                            }
                        }
                    }
                }
                stage('Push Auth Service') {
                    steps {
                        script {
                            docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_CRED_ID}") {
                                sh "docker tag cogeex-auth-service:latest ${DOCKER_REGISTRY}/${DOCKER_REPO}:auth-service-latest-${BUILD_NUMBER}"
                                sh "docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}:auth-service-latest-${BUILD_NUMBER}"
                            }
                        }
                    }
                }
                stage('Push Company Service') {
                    steps {
                        script {
                            docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_CRED_ID}") {
                                sh "docker tag cogeex-company-service:latest ${DOCKER_REGISTRY}/${DOCKER_REPO}:company-service-latest-${BUILD_NUMBER}"
                                sh "docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}:company-service-latest-${BUILD_NUMBER}"
                            }
                        }
                    }
                }
                stage('Push Profile Service') {
                    steps {
                        script {
                            docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_CRED_ID}") {
                                sh "docker tag cogeex-profile-service:latest ${DOCKER_REGISTRY}/${DOCKER_REPO}:profile-service-latest-${BUILD_NUMBER}"
                                sh "docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}:profile-service-latest-${BUILD_NUMBER}"
                            }
                        }
                    }
                }
                stage('Push Project Service') {
                    steps {
                        script {
                            docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_CRED_ID}") {
                                sh "docker tag cogeex-project-service:latest ${DOCKER_REGISTRY}/${DOCKER_REPO}:project-service-latest-${BUILD_NUMBER}"
                                sh "docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}:project-service-latest-${BUILD_NUMBER}"
                            }
                        }
                    }
                }
                stage('Push Parser Service') {
                    steps {
                        script {
                            docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_CRED_ID}") {
                                sh "docker tag cogeex-parser-service:latest ${DOCKER_REGISTRY}/${DOCKER_REPO}:parser-service-latest-${BUILD_NUMBER}"
                                sh "docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}:parser-service-latest-${BUILD_NUMBER}"
                            }
                        }
                    }
                }
                stage('Push Python Service') {
                    steps {
                        script {
                            docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_CRED_ID}") {
                                sh "docker tag cogeex-python-service:latest ${DOCKER_REGISTRY}/${DOCKER_REPO}:python-service-latest-${BUILD_NUMBER}"
                                sh "docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}:python-service-latest-${BUILD_NUMBER}"
                            }
                        }
                    }
                }
            }
        }

        stage('Build and Push Frontend') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/develop']],
                    extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: "${AZURE_GIT_CRED_ID}",
                        url: 'https://dev.azure.com/CoConsult/CoGeex%20v2/_git/Cogeex-FrontEnd'
                    ]]
                ])
                script {
                    docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_CRED_ID}") {
                        def imageTag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:frontend-latest-${BUILD_NUMBER}"
                        sh "docker build -f Dockerfile.preprod -t ${imageTag} ."
                        sh "docker push ${imageTag}"
                    }
                }
            }
        }

        stage('Deploy to VPS') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "*/${JENKINS_DEVOPS_BRANCH}"]],
                    extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: "${GIT_CRED_ID}",
                        url: "${JENKINS_DEVOPS_REPO}"
                    ]]
                ])
                sshagent(credentials: ["${SSH_CRED_ID}"]) {
                    sh """
                    mkdir -p manifests
                    cp jenkins-devops/*.yaml manifests/
                    scp -o StrictHostKeyChecking=no manifests/*.yaml ${VPS_USER}@${VPS_HOST}:/home/${VPS_USER}/manifests/
                    ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} << 'EOF'
                        mkdir -p /home/${VPS_USER}/manifests
                        kubectl apply -f /home/${VPS_USER}/manifests/cogeex-db.yaml
                        kubectl apply -f /home/${VPS_USER}/manifests/cogeex-eureka.yaml
                        kubectl apply -f /home/${VPS_USER}/manifests/cogeex-gateway.yaml
                        kubectl wait --for=condition=ready pod -l app=cogeex-eureka --timeout=120s
                        kubectl wait --for=condition=ready pod -l app=cogeex-gateway --timeout=120s
                        kubectl apply -f /home/${VPS_USER}/manifests/cogeex-auth-service.yaml
                        kubectl apply -f /home/${VPS_USER}/manifests/cogeex-company-service.yaml
                        kubectl apply -f /home/${VPS_USER}/manifests/cogeex-profile-service.yaml
                        kubectl apply -f /home/${VPS_USER}/manifests/cogeex-project-service.yaml
                        kubectl apply -f /home/${VPS_USER}/manifests/cogeex-parser-service.yaml
                        kubectl apply -f /home/${VPS_USER}/manifests/cogeex-python-service.yaml
                        kubectl apply -f /home/${VPS_USER}/manifests/cogeex-frontend-deployment.yaml
                        kubectl apply -f /home/${VPS_USER}/manifests/cogeex-gateway-service.yaml
                        kubectl apply -f /home/${VPS_USER}/manifests/cogeex-frontend-service.yaml
                        kubectl get pods -A
                        kubectl get svc
                    EOF
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Deployment done!"
        }
        failure {
            echo "Deployment failed. Check logs."
        }
    }
}