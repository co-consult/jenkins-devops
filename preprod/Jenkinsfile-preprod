pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'ousshen'
        DOCKER_REPO = 'cogeex'
        DOCKER_CRED_ID = 'docker_creds'
        SSH_CRED_ID = 'ssh-credentials'
        AZURE_GIT_CRED_ID = 'azure_secret'
        GIT_CRED_ID = 'git_secret'
        JENKINS_DEVOPS_REPO = 'https://github.com/co-consult/jenkins-devops'
        JENKINS_DEVOPS_BRANCH = 'DEVOPS-13'
        VPS_USER = 'ubuntu'
        VPS_HOST = '20.19.38.22'
    }

    stages {
        stage('Push Microservice Images') {
            parallel {
                stage('Push Eureka') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:eureka-latest-${BUILD_NUMBER}"
                            sh "docker tag cogeex/eureka-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
                stage('Push Gateway') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:gateway-latest-${BUILD_NUMBER}"
                            sh "docker tag cogeex/gateway-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
                stage('Push Auth Service') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:auth-service-latest-${BUILD_NUMBER}"
                            sh "docker tag cogeex/auth-service-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
                stage('Push Company Service') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:company-service-latest-${BUILD_NUMBER}"
                            sh "docker tag cogeex/company-service-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
                stage('Push Profile Service') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:profile-service-latest-${BUILD_NUMBER}"
                            sh "docker tag cogeex/profile-service-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
                stage('Push Project Service') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:project-service-latest-${BUILD_NUMBER}"
                            sh "docker tag cogeex/project-service-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
                stage('Push Parser Service') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:parser-service-latest-${BUILD_NUMBER}"
                            sh "docker tag cogeex/parser-service-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
                stage('Push Matching Service') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:matching-service-latest-${BUILD_NUMBER}"
                            sh "docker tag cogeex/matching-service-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
            }
        }

        stage('Build and Push Frontend') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/develop']],
                    userRemoteConfigs: [[
                        credentialsId: "${AZURE_GIT_CRED_ID}",
                        url: 'https://dev.azure.com/CoConsult/CoGeex%20v2/_git/Cogeex-FrontEnd'
                    ]]
                ])
                script {
                    def imageName = "${DOCKER_REGISTRY}/${DOCKER_REPO}:frontend-latest-${BUILD_NUMBER}"
                    docker.build("${IMAGE_NAME}", "-f Dockerfile .")
                    docker.withRegistry('', DOCKER_CRED_ID) {
                        docker.image(imageName).push()
                    }
                }
            }
        }

        stage('Cleanup Dangling Images') {
            steps {
                script {
                    sh '''
                        echo "Cleaning up dangling images..."
                        docker image prune -f
                    '''
                }
            }
        }
    }

    post {
        always {
            echo " Pipeline complete â€” Build #${BUILD_NUMBER}"
        }
    }
}
