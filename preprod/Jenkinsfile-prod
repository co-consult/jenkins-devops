pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'ousshen'
        DOCKER_REPO = 'cogeex'
        DOCKER_CRED_ID = 'docker_creds'
        SSH_CRED_ID = 'ssh-credentials-prod'
        AZURE_GIT_CRED_ID = 'azure_secret'
        GIT_CRED_ID = 'git_secret'
        JENKINS_DEVOPS_REPO = 'https://github.com/co-consult/jenkins-devops'
        JENKINS_DEVOPS_BRANCH = 'DEVOPS-24'
        VPS_USER = 'azureadmin'
        VPS_HOST = '40.119.130.52'
        VPS_SSH = 'azureadmin@40.119.130.52'
        VPS_USER_HOME = '/home/azureadmin'
    }

    stages {
        stage('Push Microservice Images') {
            parallel {
                stage('Push Eureka') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:eureka-latest"
                            sh "docker tag cogeex:eureka-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
                stage('Push Gateway') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:gateway-latest"
                            sh "docker tag cogeex:gateway-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
                stage('Push Auth Service') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:auth-service-latest"
                            sh "docker tag cogeex:auth-service-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
                stage('Push Company Service') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:company-service-latest"
                            sh "docker tag cogeex:company-service-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
                stage('Push Profile Service') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:profile-service-latest"
                            sh "docker tag cogeex:profile-service-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
                stage('Push Project Service') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:project-service-latest"
                            sh "docker tag cogeex:project-service-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
                stage('Push Parser Service') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:parser-service-latest"
                            sh "docker tag cogeex:parser-service-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
                stage('Push Matching Service') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:matching-service-latest"
                            sh "docker tag cogeex:matching-service-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
                stage('Push Frontend') {
                    steps {
                        script {
                            def tag = "${DOCKER_REGISTRY}/${DOCKER_REPO}:frontend-latest"
                            sh "docker tag cogeex:frontend-prod-latest ${tag}"
                            docker.withRegistry('', DOCKER_CRED_ID) {
                                docker.image(tag).push()
                            }
                        }
                    }
                }
            }
        }
        stage('Clone and Prepare Manifests') {
            steps {
                dir('manifests') {
                    sh '''
                        rm -f *.yaml
                        rm -rf temp-manifests
                        git clone -b $JENKINS_DEVOPS_BRANCH $JENKINS_DEVOPS_REPO temp-manifests
                        cp temp-manifests/preprod/*.yaml .
                    '''
                }
            }
        }
        stage('Deploy to VPS') {
            steps {
                sshagent(credentials: ["${SSH_CRED_ID}"]) {
                    sh """
                        echo "[INFO] Transferring YAML manifests to VM..."

                        # Copy the manifests from the local Jenkins workspace to the remote VPS
                        scp -o StrictHostKeyChecking=no manifests/*.yaml ${VPS_SSH}:${VPS_USER_HOME}/manifests/

                        echo "[INFO] Deploying to Kubernetes on VPS..."

                        # SSH into VPS, apply the manifests and pull the latest images
                        ssh -o StrictHostKeyChecking=no ${VPS_SSH} << EOF
                            echo "[INFO] Setting up the manifests folder on VPS..."
                            mkdir -p ${VPS_USER_HOME}/manifests
                            echo "[INFO] Rolling out updated services..."
                            kubectl apply -f /home/${VPS_USER}/manifests/cogeex-db.yaml
                            kubectl apply -f /home/${VPS_USER}/manifests/cogeex-eureka.yaml
                            kubectl apply -f /home/${VPS_USER}/manifests/cogeex-gateway.yaml
                            echo "Waiting for initialization."
                            sleep 60
                            kubectl apply -f /home/${VPS_USER}/manifests/cogeex-auth-service.yaml
                            echo "Waiting for liquibase initialization."
                            sleep 60
                            kubectl apply -f /home/${VPS_USER}/manifests/cogeex-company-service.yaml
                            kubectl apply -f /home/${VPS_USER}/manifests/cogeex-profile-service.yaml
                            kubectl apply -f /home/${VPS_USER}/manifests/cogeex-project-service.yaml
                            kubectl apply -f /home/${VPS_USER}/manifests/cogeex-parser-service.yaml
                            kubectl apply -f /home/${VPS_USER}/manifests/cogeex-python-service.yaml
                            kubectl apply -f /home/${VPS_USER}/manifests/cogeex-frontend-preprod.yaml
                            

                    """
                }
            }
        }   
    }
    post {
        always {
            echo "Pipeline complete â€” Build #${BUILD_NUMBER}"
        }
        success {
            echo "Deployment done!"
            mail bcc: '', body: "<b>Jenkins :</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "SUCCESS: Project name -> ${env.JOB_NAME}", to: "oussemajenkinstest@gmail.com";
        }
        failure {
            echo "Deployment failed. Check logs."
            mail bcc: '', body: "<b>Jenkins :</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "ERROR: Project name -> ${env.JOB_NAME}", to: "oussemajenkinstest@gmail.com";
        }
    }
}
